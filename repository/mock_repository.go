// Code generated by mockery v1.0.0. DO NOT EDIT.

package repository

import mock "github.com/stretchr/testify/mock"
import model "github.com/bongnv/rpkgmgr/model"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// ExistByNameAndVersion provides a mock function with given fields: name, version
func (_m *MockRepository) ExistByNameAndVersion(name string, version string) (bool, error) {
	ret := _m.Called(name, version)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(name, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: pkg
func (_m *MockRepository) Insert(pkg *model.Package) error {
	ret := _m.Called(pkg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Package) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *MockRepository) Shutdown() {
	_m.Called()
}

// Update provides a mock function with given fields: pkg
func (_m *MockRepository) Update(pkg *model.Package) error {
	ret := _m.Called(pkg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Package) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
